    Prerequisite
    - AWS console
    - Jenkins server
    - Jenkins console
    
   To do:

    AWS console:
    - create a new repository name in ECR
    - create an additional user in IAM 
    and Attach the AmazonEC2ContainerRegistryFullAccess policy: 
    then save user access keys.
     
    Jenkins server:
    - install docker-ce (dev tool)  on centos 7 
    - usermod -aG docker jenkins
    - vim /etc/docker/daemon.json and set this { “group”:”docker” }
    - service docker restart
    - Install awscli with this command below
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip awscliv2.zip
    ./aws/install
    aws configure 
    aws configure --profile name-user-created-on-awsconsole
    aws ecr get-login-password --region us-east-1 | docker login --username AWS 
    --password-stdin 97*******956.dkr.ecr.us-east-1.ama
    
    
    Jenkins console:
    - Install plugin Amazon ECR in manage jenkins >> manage plugins 
    ( generates Docker authentication token from Amazon Credentials to access Amazon ECR.) 
    - Install plugin CloudBees AWS Credentials in manage jenkins >> 
    manage plugins ( to  Store Amazon IAM access keys (AWSAccessKeyId and AWSSecretKey) 
    within the Jenkins Credentials API)

    - The next step will be to create a Jenkins job to build and push images.
    - Click on New Item in jenkins console dashboard		
    - Create a new job call docker-image-ECR, 
    - Click on maven (because we need to deploy the war file)  
    - Decription:docker image ECR creation, 
    - Git: paste URL of the code here,  
    - Branches to build : */master (or any branch we have on this project)
    - Poll SCM: */2 * * * *,  
    - Goal: clean package install (maven will run mvn clean.....),
    - in post steps, click on run only if build succeeds;
    - in add post build, click on docker build and publish 
    (we need to give login info to jenkins for the registery to be able 
    to push the image to docker registry)
    repository name: ECR repo-name;   
    Tag: ${BUILD_NUMBER} ;   
    server credential: add jenkins; 
    Kind : AWS Credentials
    ID : user-created
    Access key ID : 
    SEcret Access key :
    Docker registry URL: https://(copy and paste URI of the repository name)
    registry credentials, click on add and choose the credentials created.
    - Save and build.
			
    - Install and setup kubectl
    curl -LO "https://storage.googleapis.com/kubernetes-release 
    or
    url -LO "https://storage.googleapis.com/kubernetes-release/release/$
    (curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
    /bin/linux/amd64/kubectl"
    chmod +x ./kubectl 
    sudo mv ./kubectl /usr/local/bin
    kubectl version
    
    - Install and Setup eksctl
    curl --silent --location "https://github.com/weaveworks/eksctl/releases
    /latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
    sudo mv /tmp/eksctl /usr/local/bin
    eksctl version
    
- Switch to user jenkins
        sudo su — jenkins
	
  -  Create EKS Cluster with two worker nodes using eksctl
eksctl create cluster --name cluster_name --region us-east-2 --nodegroup-name my-nodes --node-type t3.small --managed --nodes 2 
 
 - Confirm EKS cluster is up and running.
 eksctl get cluster --name cluster_name --region us-east-2 
 
 -  Update Kube config by entering below command:

aws eks update-kubeconfig --name cluster_name --region us-east-2

you can view the kubeconfig file by entering the below command:

cat  /var/lib/jenkins/.kube/config

-  Connect to EKS cluster using kubectl commands

kubectl get nodes

kubectl get ns


 -  Deploy Nginx on a Kubernetes Cluster

kubectl create deployment nginx --image=nginx
in shell script , run:
  kubectl apply -f name_deployment.yml

kubectl get deployments

-  Delete EKS Cluster using eksctl

eksctl delete cluster --name demo-eks --region us-east-2




    
    
    


    

